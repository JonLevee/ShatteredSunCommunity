@using ShatteredSunCommunity.Components.PageSupport
@inject Components.PageSupport.UnitViewFilters unitViewFilters
@inject FilterOptionHandler filterOptionHandler

    <thead>
    @foreach (var selector in unitViewFilters.GroupBy.GetDisplayableSelectors())
    {
        <tr>
            <th class="filteringControl">@selector.Header</th>
            <td class="filteringControl">
                <select @bind="selector.Selected" @bind:after="unitViewFilters.Refresh">
                    @foreach (var option in selector.Options)
                    {
                        <option value="@option.Value" selected="@option.IsSelected" disabled="@option.IsDisabled">@option.Value</option>
                    }
                </select>
            </td>
        </tr>
    }
    <tr><td colspan="4"><hr/></td></tr>
    <tr>
        <th class="filteringControl">Display thumbnails</th>
        <td class="filteringControl"><input type="checkbox" @bind-value="@unitViewFilters.ShowUnitThumbnails" /></td>
    </tr>
    <tr><td colspan="4"><hr /></td></tr>
    @foreach (var selector in unitViewFilters.SortFilters.GetDisplayableSelectors())
    {
        <tr>
            <th class="filteringControl">@selector.Header</th>
            <td class="filteringControl">
                <select @bind="selector.Selected" @bind:after="unitViewFilters.Refresh">
                    @foreach (var option in selector.Options)
                    {
                        <option value="@option.Value" selected="@option.IsSelected" disabled="@option.IsDisabled">@option.Value</option>
                    }
                </select>
            </td>
            <td><input type="checkbox" @bind-value="@selector.IsCheckBoxChecked" disabled="@selector.IsCheckBoxDisabled" /></td>
        </tr>
    }
    <tr><td colspan="4"><hr /></td></tr>
    @foreach (var selector in unitViewFilters.Filters.GetDisplayableSelectors())
    {
        <tr>
            <th class="filteringControl">@selector.Header</th>
            <td class="filteringControl">
                <select @bind="selector.Selected" @bind:after="unitViewFilters.Refresh">

                    @foreach (var option in selector.Options)
                    {
                        <option value="@option.Value" selected="@option.IsSelected" disabled="@option.IsDisabled">@option.Value</option>
                    }
                </select>
            </td>
        </tr>
        @if (selector.IsActive)
        {
            var filterItem = selector.FilterItem;
            <tr>
                <td colspan="3">
                    <div style="white-space: nowrap">

                        <select @bind="filterItem.FilterKey">
                            @foreach (var key in filterOptionHandler.Keys)
                            {
                                <option value="@key">@key</option>
                            }
                        </select>
                    @if (filterItem.FilterKeySelected)
                    {
                        if (selector.Filter.UseFreeFormFilter)
                        {
                            <InputText @bind="@selector.FilterItem.FilterValueLo.Text" @bind:after="unitViewFilters.Refresh">@selector.FilterItem.FilterValueLo.Text</InputText>
                        }
                        else
                        {
                            <select @bind="@selector.FilterItem.FilterValueLo.Text" @bind:after="unitViewFilters.Refresh">
                                @foreach (var value in selector.Filter.Values)
                                {
                                    <option value="@value">@value</option>
                                }
                            </select>
                        }

                        @if (!string.IsNullOrEmpty(filterItem.FilterOptionSelectorItem.JoiningWord))
                        {
                            if (selector.Filter.UseFreeFormFilter)
                            {
                                <InputText @bind="@selector.FilterItem.FilterValueHigh.Text" @bind:after="unitViewFilters.Refresh">@selector.FilterItem.FilterValueHigh.Text</InputText>
                            }
                            else
                            {
                                <select @bind="@selector.FilterItem.FilterValueHigh.Text" @bind:after="unitViewFilters.Refresh">
                                @foreach (var value in selector.Filter.Values)
                                {
                                    <option value="@value">@value</option>
                                }
                                </select>
                            }
                        }
                    }
                    </div>
                </td>
            </tr>
        }
    }
</thead>


@code {
}
