@page "/unitView"
@inherits LayoutComponentBase
@using ShatteredSunCommunity.Components.PageComponents
@using ShatteredSunCommunity.Components.PageSupport
@using ShatteredSunCommunity.Models
@using Components.Pages
@using Components.PageComponents
@using System.Reflection
@using System.ComponentModel
@inject Models.SanctuarySunData data
@inject Components.PageSupport.UnitViewFilters unitViewFilters;
@rendermode InteractiveServer

<PageTitle>Unit Viewer</PageTitle>


<h1 class="unitView">UnitView</h1>
<h2>@ProductName</h2>
<table>
    <thead>
        @foreach(var selector in unitViewFilters.GroupBy.Selectors)
        {
            var row = unitViewFilters.GroupBy.GetDataHeaderRow(selector);
            <tr>
                <th class="filteringControl">
                    @selector.Header
                    <select @bind="selector.Selected" @bind:after="unitViewFilters.OnChanged">
                        @foreach(var option in selector.Options)
                        {
                            <option value="@option.Value" selected="@option.IsSelected" disabled="@option.IsDisabled">@option.Value</option>
                        }
                    </select>
                </th>
                
                @foreach (var column in row.Columns)
                {
                    <th class="unitHeader" colspan="@column.Colspan">
                        @column.Header
                    </th>
                }
            </tr>

        }

    </thead>
    <tbody>
        <tr>
            <td class="filteringControl" rowspan="99999">
                Show unit thumbnails
                <input type="checkbox" @bind-value="@showUnitThumbnails" />

            </td>
        </tr>
        @foreach(var row in unitViewFilters.GroupBy.GetRows(data.Units))
        {
            <tr>
                @foreach(var unit in row.Units)
                {
                    <td class="unitView">
                        @if(unit != null)
                        {
                            @if (showUnitThumbnails)
                                @UnitViewThumbprint(unit)
                            else
                                @UnitViewFull(unit)
                        }
                    </td>
                }
            </tr>
        }
    </tbody>
</table>


@code {
    public string ProductName => Assembly.GetEntryAssembly()?.GetCustomAttribute<AssemblyProductAttribute>()?.Product;
    private bool showUnitThumbnails { get; set; } = false;
    private string GetUnitHeaderClass(UnitViewHeaderRow row)
    {
        return row.IsLastHeader ? "lastUnitHeader" : "unitHeader";
    }
    private RenderFragment<UnitData> UnitViewThumbprint = item =>
    @<div class="divThumbnail">
        <table class="unitTableThumbnail" style="vertical-align: top;">
            @foreach(var field in item.Values.Where(v=>v.IsThumbnail))
            {
                <tr class="unitRowThumbnail">
                    <th class="unitColThumbnail">@field.DisplayName</th>
                    <td class="unitColThumbnail">@field.Text</td>
                </tr>
            }
        </table>
    </div>;
    private RenderFragment<UnitData> UnitViewFull = item =>
    @<div>
        <table>
            <tr>
                <td class="unitImage" rowspan="5">@item["GeneralIconUI"]</td>
                <th class="unitViewData">@item["GeneralDisplayName"]</th>
            </tr>
            <tr><td>[@item["GeneralName"]] @item["GeneralDisplayName"]</td></tr>
            <tr><td>Faction: @item["Faction"]</td></tr>
            <tr><td>tpId: @item["GeneralTpId"]</td></tr>
            <tr><td>Enabled: @item["Enabled"]</td></tr>

        </table>
        <hr />
        <table class="unitTable">
            <tr class="unitRow">
                <td class="unitCol">@item["DefenceHealthMax"]</td>
                <td class="unitCol">@item["EconomyCostEnergy"]</td>
                <td class="unitCol">@item["EconomyCostAlloys"]</td>
                <td class="unitCol">@item["EconomyBuildTime"]</td>
            </tr>
            @foreach(var field in item.Values.Where(v=>!v.IsHeader))
        {
            <tr class="unitRow">
                @foreach(var group in field.GroupParts)
            {
                <td class="unitCol">@group</td>
            }
                <td class="unitCol" colspan="@field.ColSpan">@field.Text</td>
            </tr>
        }
        </table>
    </div>;
}
